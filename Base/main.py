# --- List , Dict , Set Comprehension == Генераторы Списком , Множеств и Словарей

my_list = [a for a in range(10) if a % 2 == 0]
my_set = {a for a in range(10) if a % 2 == 0}
my_dict = {a: 10 for a in range(10) if a % 2 == 0}

# -----   Области Видимости Переменной , LEGB (Local, Enclosing, Global and Built-in)   -----------------------------------------------------------------------------------------------------------------------

str = "global"


def outer():
    str = "Enclosing"

    def inner():
        str = "local"
        print(str)

    print(str)
    inner()


# --- global позвоялет использовате переменную из глобальной области видимости

a = 3
# a = 3 -> a = 5


def outer():
    global a
    a = 5


outer()


# --- nonlocal позволяет использовать переменую, которая лежит во внешней функции


def outer():
    a = 3

    def inner():
        nonlocal a
        a = 5

    inner()
    # print(a)   a = 3 -> a = 5


# -----   КОПИИ   ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# --- Поверхносная Копия
# две переменные сылаються на один обьект в памяти
a = [1, [1]]
b = a
b.append(2)
# a = [1,[1],2]
# b = [1,[1],2]

# Другие Примеры
b = list(a)
b = a[:]
b = [i for i in range(10)]

# --- Глубокая Копия
# копируються только елементы первой вложености списка
# текущая переменая всеравно ссылаеться на внутренние списки предидущей переменной

import copy

a = [1, [1]]
b = copy.copy(a)
b[1].append(2)
# a = [1,[1,2]
# b = [1,[1,2]

# --- Очень Глубокая Копия
# копируються все елементы переменной, даже вложенные
import copy

a = [1, [1]]
b = copy.deepcopy(a)
b[1].append(2)
# a = [1,[1]]
# b = [1,[1,2]]
